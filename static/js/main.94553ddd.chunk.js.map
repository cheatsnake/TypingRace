{"version":3,"sources":["components/showSpeed/showSpeed.jsx","components/textArea/textArea.jsx","components/timer/timer.jsx","components/typeArea/typeArea.jsx","App.js","index.js"],"names":["ShowSpeed","props","onReset","useState","close","setClose","closeWindow","useEffect","handleEsc","event","keyCode","window","addEventListener","removeEventListener","className","onClick","speed","TextArea","words","key","content","map","word","Timer","state","timer","time","this","timerID","setInterval","setClock","clearInterval","current","setState","onTime","Component","TypeArea","styles","setStyles","onType","onChar","autoFocus","type","maxLength","onChange","e","target","value","length","slice","href","data","split","random","arr","num","Math","floor","unshift","App","chars","setChar","randomData","setRandomData","toFixed","prevState","arrCopy","pop","newArr","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.94553ddd.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport './showSpeed.scss';\r\n\r\nconst ShowSpeed = (props) => {\r\n\r\n    const {onReset} = props;\r\n\r\n    const [close, setClose] = useState(false);\r\n\r\n    const closeWindow = () => setClose(true);\r\n\r\n    useEffect(() => {\r\n        const handleEsc = (event) => {\r\n           if (event.keyCode === 27) {\r\n            closeWindow();\r\n          }\r\n        };\r\n        window.addEventListener('keydown', handleEsc);\r\n    \r\n        return () => {\r\n          window.removeEventListener('keydown', handleEsc);\r\n        };\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (close) onReset()\r\n    }, [close, onReset])\r\n\r\n    if (close) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <div className=\"score\">\r\n            <div className=\"close\" onClick={closeWindow}>&times;</div>\r\n            <h2>Your speed</h2>\r\n            <span>{props.speed} WPM</span>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ShowSpeed;","import React from 'react';\r\nimport './textArea.scss';\r\n\r\nconst TextArea = ({words}) => {\r\n    let key = 0;\r\n    const content = words.map(word => {\r\n        return (\r\n            <h2 key={key++}>{word}</h2>\r\n        )\r\n    });\r\n    return (\r\n        <div className=\"textArea\">\r\n            {content}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TextArea;","import React, {Component} from 'react';\r\nimport './timer.scss';\r\n\r\nclass Timer extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            timer: this.props.time,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.timerID = setInterval(\r\n            () => this.setClock(),\r\n        1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.timerID);\r\n    }\r\n\r\n\r\n    setClock() {\r\n        let current = this.state.timer;\r\n        this.setState({\r\n            timer: current - 1,\r\n        });\r\n    }\r\n\r\n    render() {\r\n\r\n        const {timer} = this.state;\r\n        if (timer === 0) {\r\n            clearInterval(this.timerID);\r\n            this.props.onTime();\r\n            return null;\r\n        }\r\n\r\n        return (\r\n            <div className=\"timer\">\r\n                <p>{timer}</p>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Timer;","import React, {useState} from 'react';\r\nimport './typeArea.scss';\r\n\r\nconst TypeArea = (props) => {\r\n\r\n    const [styles, setStyles] = useState('');\r\n    const {words, onType, onChar} = props;\r\n\r\n    function update(e) {\r\n        const current = e.target.value;\r\n        const word = words[words.length - 1].slice(0, e.target.value.length);\r\n\r\n        if (e.target.value === words[words.length - 1] + ' ') {\r\n            e.target.value = '';\r\n            onChar();\r\n            onType();\r\n        } else if (current !== word) {\r\n            setStyles('red');\r\n        } else {\r\n            setStyles('');\r\n            onChar();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"typeArea\">\r\n                <input \r\n                autoFocus\r\n                className={styles}\r\n                type=\"text\" \r\n                maxLength=\"16\"\r\n                onChange={update}/>\r\n            </div>\r\n            <div className=\"label\">\r\n                <a href=\"https://cheatsnake.github.io/\">Made by <span>Yury</span></a>\r\n            </div>\r\n        </>\r\n    )};\r\n\r\nexport default TypeArea;","import React, {useState} from 'react';\nimport './App.scss';\nimport ShowSpeed from './components/showSpeed/showSpeed';\nimport TextArea from './components/textArea/textArea';\nimport Timer from './components/timer/timer';\nimport TypeArea from './components/typeArea/typeArea';\n\n//top 999 most using English words\nconst dataStr = 'able about above act add afraid after again against age ago agree air all allow also always am among an and anger animal answer any appear apple are area arm arrange arrive art as ask at atom baby back bad ball band bank bar base basic bat be bear beat beauty bed been before began begin behind believe bell best better between big bird bit black block blood blow blue board boat body bone book born both bottom bought box boy branch bread break bright bring broad broke brother brought brown build burn busy but buy by call came camp can capital captain car card care carry case cat catch caught cause cell cent center century certain chair chance change character charge chart check chick chief child children choose chord circle city claim class clean clear climb clock close clothe cloud coast coat cold collect colony color column come common company compare complete condition connect consider consonant contain continent continue control cook cool copy corn corner correct cost cotton could count country course cover cow crease create crop cross crowd cry current cut dad dance danger dark day dead deal dear death decide decimal deep degree depend describe desert design determine develop dictionary did die differ difficult direct discuss distant divide division do doctor does dog dollar done dont door double down draw dream dress drink drive drop dry duck during each ear early earth ease east eat edge effect egg eight either electric element else end enemy energy engine enough enter equal equate especially even evening event ever every exact example except excite exercise expect experience experiment eye face fact fair fall family famous far farm fast fat father favor fear feed feel feet fell felt few field fig fight figure fill final find fine finger finish fire first fish fit five flat floor flow flower fly follow food foot for force forest form forward found four fraction free fresh friend from front fruit full fun game garden gas gather gave general gentle get girl give glad glass go gold gone good got govern grand grass gray great green grew ground group grow guess guide gun had hair half hand happen happy hard has hat have he head hear heard heart heat heavy held help her here high hill him his history hit hold hole home hope horse hot hour house how huge human hundred hunt hurry I ice idea if imagine in inch include indicate industry insect instant instrument interest invent iron is island it job join joy jump just keep kept key kill kind king knew know lady lake land language large last late laugh law lay lead learn least leave led left leg length less let letter level lie life lift light like line liquid list listen little live locate log lone long look lost lot loud love low machine made magnet main major make man many map mark market mass master match material matter may me mean meant measure meat meet melody men metal method middle might mile milk million mind mine minute miss mix modern molecule moment money month moon more morning most mother motion mount mountain mouth move much multiply music must my name nation natural nature near necessary neck need neighbor never new next night nine no noise noon nor north nose not note nothing notice noun now number numeral object observe occur ocean of off offer office often oh oil old on once one only open operate opposite or order organ original other our out over own oxygen page paint pair paper paragraph parent part particular party pass past path pattern pay people perhaps period person phrase pick picture piece pitch place plain plan plane planet plant play please plural poem point poor populate port pose position possible post pound power practice prepare present press pretty print probable problem process produce product proper property protect prove provide pull push put quart question quick quiet quite quotient race radio rail rain raise ran range rather reach read ready real reason receive record red region remember repeat reply represent require rest result rich ride right ring rise river road rock roll room root rope rose round row rub rule run safe said sail salt same sand sat save saw say scale school science score sea search season seat second section see seed seem segment select self sell send sense sent sentence separate serve set settle seven several shall shape share sharp she sheet shell shine ship shoe shop shore short should shoulder shout show side sight sign silent silver similar simple since sing single sister sit six size skill skin sky slave sleep slip slow small smell smile snow so soft soil soldier solution solve some son song soon sound south space speak special speech speed spell spend spoke spot spread spring square stand star start state station stay stead steam steel step stick still stone stood stop store story straight strange stream street stretch string strong student study subject substance subtract success such sudden suffix sugar suggest suit summer sun supply support sure surface surprise swim syllable symbol system table tail take talk tall teach team teeth tell temperature ten term test than thank that the their them then there these they thick thin thing think third this those though thought thousand three through throw thus tie time tiny tire to together told tone too took tool top total touch toward town track trade train travel tree triangle trip trouble truck true try tube turn twenty two type under unit until up us use usual valley value vary verb very view village visit voice vowel wait walk wall want war warm was wash watch water wave way we wear weather week weight well went were west what wheel when where whether which while white who whole whose why wide wife wild will win wind window wing winter wire wish with woman women wonder wont wood word work world would write written wrong wrote yard year yellow yes yet you young your';\n\nconst data = dataStr.split(' ');\n\nfunction random(arr = []) {\n  for(arr.length; arr.length < 3;) {\n    const num = Math.floor(Math.random() * 999);\n    arr.unshift(data[num]);\n  }\n  return arr;\n}\n\nlet timer = false;\n\nfunction App() {\n  \n  const [chars, setChar] = useState(0);\n  const [randomData, setRandomData] = useState(random());\n\n\n  const countChar = () => setChar(prevState => prevState + 1);\n\n  const update = () => setRandomData(prevState => {\n    let arrCopy = prevState;\n    arrCopy.pop();\n    const newArr = random(arrCopy);\n    return [...newArr];\n  })\n\n  function onTime() {\n    timer = true;\n  }\n\n  if (timer) {\n    timer = false;\n    return <ShowSpeed onReset={() => setChar(0)} speed={(chars / 4.8).toFixed(1)}/>\n  }\n\n  return (\n    <div className=\"app\">\n      {chars > 0 ? <Timer time={59} chars={chars} onTime={() => onTime()}/> : null}\n      <TextArea words={randomData}/>\n      <TypeArea \n        words={randomData} \n        onType={update}\n        onChar={countChar}\n      />\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n\nReactDOM.render(\n\n      <App />,\n      \n  document.getElementById('root')\n);\n"],"sourceRoot":""}